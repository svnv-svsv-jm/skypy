# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from DexData import DexData
from EggHatchInfo import EggHatchInfo
from EvoData import EvoData
from GenderInfo import GenderInfo
from LevelupMoveData import LevelupMoveData
from SpeciesInfo import SpeciesInfo
from StatInfo import StatInfo
from typing import Optional
np = import_numpy()

class Personal(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Personal()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPersonal(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Personal
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Personal
    def Species(self) -> Optional[SpeciesInfo]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            obj = SpeciesInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Personal
    def IsPresent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Personal
    def Dex(self) -> Optional[DexData]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            obj = DexData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Personal
    def KitakamiDex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def BlueberryDex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def Type1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def Type2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def Ability1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Personal
    def Ability2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Personal
    def AbilityHidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Personal
    def XpGrowth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def CatchRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def Gender(self) -> Optional[GenderInfo]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            obj = GenderInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Personal
    def EggGroup1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def EggGroup2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def EggHatch(self) -> Optional[EggHatchInfo]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = o + self._tab.Pos
            obj = EggHatchInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Personal
    def EggHatchSteps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def BaseFriendship(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def ExpAddend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # Personal
    def EvoStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Personal
    def UnkFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Personal
    def EvYield(self) -> Optional[StatInfo]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = o + self._tab.Pos
            obj = StatInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Personal
    def BaseStats(self) -> Optional[StatInfo]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = o + self._tab.Pos
            obj = StatInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Personal
    def EvoData(self, j: int) -> Optional[EvoData]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            obj = EvoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Personal
    def EvoDataLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Personal
    def EvoDataIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # Personal
    def TmMoves(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Personal
    def TmMovesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Personal
    def TmMovesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Personal
    def TmMovesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # Personal
    def EggMoves(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Personal
    def EggMovesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Personal
    def EggMovesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Personal
    def EggMovesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # Personal
    def ReminderMoves(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Personal
    def ReminderMovesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Personal
    def ReminderMovesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Personal
    def ReminderMovesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # Personal
    def LevelupMoves(self, j: int) -> Optional[LevelupMoveData]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            obj = LevelupMoveData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Personal
    def LevelupMovesLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Personal
    def LevelupMovesIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

def PersonalStart(builder: flatbuffers.Builder):
    builder.StartObject(28)

def Start(builder: flatbuffers.Builder):
    PersonalStart(builder)

def PersonalAddSpecies(builder: flatbuffers.Builder, species: Any):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(species), 0)

def AddSpecies(builder: flatbuffers.Builder, species: Any):
    PersonalAddSpecies(builder, species)

def PersonalAddIsPresent(builder: flatbuffers.Builder, isPresent: bool):
    builder.PrependBoolSlot(1, isPresent, 0)

def AddIsPresent(builder: flatbuffers.Builder, isPresent: bool):
    PersonalAddIsPresent(builder, isPresent)

def PersonalAddDex(builder: flatbuffers.Builder, dex: Any):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dex), 0)

def AddDex(builder: flatbuffers.Builder, dex: Any):
    PersonalAddDex(builder, dex)

def PersonalAddKitakamiDex(builder: flatbuffers.Builder, kitakamiDex: int):
    builder.PrependUint8Slot(3, kitakamiDex, 0)

def AddKitakamiDex(builder: flatbuffers.Builder, kitakamiDex: int):
    PersonalAddKitakamiDex(builder, kitakamiDex)

def PersonalAddBlueberryDex(builder: flatbuffers.Builder, blueberryDex: int):
    builder.PrependUint8Slot(4, blueberryDex, 0)

def AddBlueberryDex(builder: flatbuffers.Builder, blueberryDex: int):
    PersonalAddBlueberryDex(builder, blueberryDex)

def PersonalAddType1(builder: flatbuffers.Builder, type1: int):
    builder.PrependUint8Slot(5, type1, 0)

def AddType1(builder: flatbuffers.Builder, type1: int):
    PersonalAddType1(builder, type1)

def PersonalAddType2(builder: flatbuffers.Builder, type2: int):
    builder.PrependUint8Slot(6, type2, 0)

def AddType2(builder: flatbuffers.Builder, type2: int):
    PersonalAddType2(builder, type2)

def PersonalAddAbility1(builder: flatbuffers.Builder, ability1: int):
    builder.PrependUint16Slot(7, ability1, 0)

def AddAbility1(builder: flatbuffers.Builder, ability1: int):
    PersonalAddAbility1(builder, ability1)

def PersonalAddAbility2(builder: flatbuffers.Builder, ability2: int):
    builder.PrependUint16Slot(8, ability2, 0)

def AddAbility2(builder: flatbuffers.Builder, ability2: int):
    PersonalAddAbility2(builder, ability2)

def PersonalAddAbilityHidden(builder: flatbuffers.Builder, abilityHidden: int):
    builder.PrependUint16Slot(9, abilityHidden, 0)

def AddAbilityHidden(builder: flatbuffers.Builder, abilityHidden: int):
    PersonalAddAbilityHidden(builder, abilityHidden)

def PersonalAddXpGrowth(builder: flatbuffers.Builder, xpGrowth: int):
    builder.PrependUint8Slot(10, xpGrowth, 0)

def AddXpGrowth(builder: flatbuffers.Builder, xpGrowth: int):
    PersonalAddXpGrowth(builder, xpGrowth)

def PersonalAddCatchRate(builder: flatbuffers.Builder, catchRate: int):
    builder.PrependUint8Slot(11, catchRate, 0)

def AddCatchRate(builder: flatbuffers.Builder, catchRate: int):
    PersonalAddCatchRate(builder, catchRate)

def PersonalAddGender(builder: flatbuffers.Builder, gender: Any):
    builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(gender), 0)

def AddGender(builder: flatbuffers.Builder, gender: Any):
    PersonalAddGender(builder, gender)

def PersonalAddEggGroup1(builder: flatbuffers.Builder, eggGroup1: int):
    builder.PrependUint8Slot(13, eggGroup1, 0)

def AddEggGroup1(builder: flatbuffers.Builder, eggGroup1: int):
    PersonalAddEggGroup1(builder, eggGroup1)

def PersonalAddEggGroup2(builder: flatbuffers.Builder, eggGroup2: int):
    builder.PrependUint8Slot(14, eggGroup2, 0)

def AddEggGroup2(builder: flatbuffers.Builder, eggGroup2: int):
    PersonalAddEggGroup2(builder, eggGroup2)

def PersonalAddEggHatch(builder: flatbuffers.Builder, eggHatch: Any):
    builder.PrependStructSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(eggHatch), 0)

def AddEggHatch(builder: flatbuffers.Builder, eggHatch: Any):
    PersonalAddEggHatch(builder, eggHatch)

def PersonalAddEggHatchSteps(builder: flatbuffers.Builder, eggHatchSteps: int):
    builder.PrependUint8Slot(16, eggHatchSteps, 0)

def AddEggHatchSteps(builder: flatbuffers.Builder, eggHatchSteps: int):
    PersonalAddEggHatchSteps(builder, eggHatchSteps)

def PersonalAddBaseFriendship(builder: flatbuffers.Builder, baseFriendship: int):
    builder.PrependUint8Slot(17, baseFriendship, 0)

def AddBaseFriendship(builder: flatbuffers.Builder, baseFriendship: int):
    PersonalAddBaseFriendship(builder, baseFriendship)

def PersonalAddExpAddend(builder: flatbuffers.Builder, expAddend: int):
    builder.PrependInt16Slot(18, expAddend, 0)

def AddExpAddend(builder: flatbuffers.Builder, expAddend: int):
    PersonalAddExpAddend(builder, expAddend)

def PersonalAddEvoStage(builder: flatbuffers.Builder, evoStage: int):
    builder.PrependUint8Slot(19, evoStage, 0)

def AddEvoStage(builder: flatbuffers.Builder, evoStage: int):
    PersonalAddEvoStage(builder, evoStage)

def PersonalAddUnkFlag(builder: flatbuffers.Builder, unkFlag: bool):
    builder.PrependBoolSlot(20, unkFlag, 0)

def AddUnkFlag(builder: flatbuffers.Builder, unkFlag: bool):
    PersonalAddUnkFlag(builder, unkFlag)

def PersonalAddEvYield(builder: flatbuffers.Builder, evYield: Any):
    builder.PrependStructSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(evYield), 0)

def AddEvYield(builder: flatbuffers.Builder, evYield: Any):
    PersonalAddEvYield(builder, evYield)

def PersonalAddBaseStats(builder: flatbuffers.Builder, baseStats: Any):
    builder.PrependStructSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(baseStats), 0)

def AddBaseStats(builder: flatbuffers.Builder, baseStats: Any):
    PersonalAddBaseStats(builder, baseStats)

def PersonalAddEvoData(builder: flatbuffers.Builder, evoData: int):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(evoData), 0)

def AddEvoData(builder: flatbuffers.Builder, evoData: int):
    PersonalAddEvoData(builder, evoData)

def PersonalStartEvoDataVector(builder, numElems: int) -> int:
    return builder.StartVector(16, numElems, 2)

def StartEvoDataVector(builder, numElems: int) -> int:
    return PersonalStartEvoDataVector(builder, numElems)

def PersonalAddTmMoves(builder: flatbuffers.Builder, tmMoves: int):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(tmMoves), 0)

def AddTmMoves(builder: flatbuffers.Builder, tmMoves: int):
    PersonalAddTmMoves(builder, tmMoves)

def PersonalStartTmMovesVector(builder, numElems: int) -> int:
    return builder.StartVector(2, numElems, 2)

def StartTmMovesVector(builder, numElems: int) -> int:
    return PersonalStartTmMovesVector(builder, numElems)

def PersonalAddEggMoves(builder: flatbuffers.Builder, eggMoves: int):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(eggMoves), 0)

def AddEggMoves(builder: flatbuffers.Builder, eggMoves: int):
    PersonalAddEggMoves(builder, eggMoves)

def PersonalStartEggMovesVector(builder, numElems: int) -> int:
    return builder.StartVector(2, numElems, 2)

def StartEggMovesVector(builder, numElems: int) -> int:
    return PersonalStartEggMovesVector(builder, numElems)

def PersonalAddReminderMoves(builder: flatbuffers.Builder, reminderMoves: int):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(reminderMoves), 0)

def AddReminderMoves(builder: flatbuffers.Builder, reminderMoves: int):
    PersonalAddReminderMoves(builder, reminderMoves)

def PersonalStartReminderMovesVector(builder, numElems: int) -> int:
    return builder.StartVector(2, numElems, 2)

def StartReminderMovesVector(builder, numElems: int) -> int:
    return PersonalStartReminderMovesVector(builder, numElems)

def PersonalAddLevelupMoves(builder: flatbuffers.Builder, levelupMoves: int):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(levelupMoves), 0)

def AddLevelupMoves(builder: flatbuffers.Builder, levelupMoves: int):
    PersonalAddLevelupMoves(builder, levelupMoves)

def PersonalStartLevelupMovesVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 2)

def StartLevelupMovesVector(builder, numElems: int) -> int:
    return PersonalStartLevelupMovesVector(builder, numElems)

def PersonalEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return PersonalEnd(builder)
