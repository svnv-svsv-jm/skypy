# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class StatInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls) -> int:
        return 6

    # StatInfo
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StatInfo
    def Hp(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # StatInfo
    def Atk(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(1))
    # StatInfo
    def Def(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    # StatInfo
    def Spa(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(3))
    # StatInfo
    def Spd(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # StatInfo
    def Spe(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(5))

def CreateStatInfo(builder, hp, atk, def, spa, spd, spe):
    builder.Prep(1, 6)
    builder.PrependUint8(spe)
    builder.PrependUint8(spd)
    builder.PrependUint8(spa)
    builder.PrependUint8(def)
    builder.PrependUint8(atk)
    builder.PrependUint8(hp)
    return builder.Offset()
