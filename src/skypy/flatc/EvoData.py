# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class EvoData(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls) -> int:
        return 16

    # EvoData
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EvoData
    def Level(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # EvoData
    def Condition(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    # EvoData
    def Parameter(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # EvoData
    def Reserved3(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(6))
    # EvoData
    def Reserved4(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # EvoData
    def Reserved5(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(10))
    # EvoData
    def Species(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # EvoData
    def Form(self): return self._tab.Get(flatbuffers.number_types.Uint16Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(14))

def CreateEvoData(builder, level, condition, parameter, reserved3, reserved4, reserved5, species, form):
    builder.Prep(2, 16)
    builder.PrependUint16(form)
    builder.PrependUint16(species)
    builder.PrependUint16(reserved5)
    builder.PrependUint16(reserved4)
    builder.PrependUint16(reserved3)
    builder.PrependUint16(parameter)
    builder.PrependUint16(condition)
    builder.PrependUint16(level)
    return builder.Offset()
