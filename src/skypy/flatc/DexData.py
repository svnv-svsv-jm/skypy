# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any

np = import_numpy()


class DexData(object):
    __slots__ = ["_tab"]

    @classmethod
    def SizeOf(cls) -> int:
        return 4

    # DexData
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DexData
    def Index(self):
        return self._tab.Get(
            flatbuffers.number_types.Uint16Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0),
        )

    # DexData
    def Group(self):
        return self._tab.Get(
            flatbuffers.number_types.Uint8Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2),
        )


def CreateDexData(builder, index, group):
    builder.Prep(2, 4)
    builder.Pad(1)
    builder.PrependUint8(group)
    builder.PrependUint16(index)
    return builder.Offset()
